rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for authentication and authorization
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAnonymous() {
      return request.auth != null && request.auth.token.firebase.sign_in_provider == 'anonymous';
    }
    
    function isEmailVerified() {
      return request.auth != null && request.auth.token.email_verified == true;
    }
    
    function isOwner(restaurantId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/tenants/$(restaurantId)/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/tenants/$(restaurantId)/users/$(request.auth.uid)).data.role in ['admin', 'owner'];
    }
    
    function isTenantMember(restaurantId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/tenants/$(restaurantId)/users/$(request.auth.uid));
    }
    
    function isValidRestaurantData() {
      return request.resource.data.keys().hasAll(['name', 'email', 'adminUserId', 'createdAt']) &&
             request.resource.data.name is string &&
             request.resource.data.name.size() > 0 &&
             request.resource.data.name.size() <= 100 &&
             request.resource.data.email is string &&
             request.resource.data.email.matches('.*@.*\\..*') &&
             request.resource.data.adminUserId is string &&
             request.resource.data.adminUserId.size() > 0;
    }
    
    function isValidUserData() {
      return request.resource.data.keys().hasAll(['name', 'role', 'createdAt']) &&
             request.resource.data.name is string &&
             request.resource.data.name.size() > 0 &&
             request.resource.data.name.size() <= 50 &&
             request.resource.data.role in ['admin', 'manager', 'cashier', 'waiter', 'chef'];
    }
    
    // SECURE RULES FOR RESTAURANT REGISTRATION AND AUTHENTICATION
    // Strict tenant isolation and proper authorization checks
    
    // Global restaurants collection - only owners can read their own restaurant
    match /global_restaurants/{restaurantId} {
      allow read: if isOwner(restaurantId);
      allow create: if isAuthenticated() && 
                       isValidRestaurantData() &&
                       request.auth.uid == request.resource.data.adminUserId;
      allow update, delete: if isOwner(restaurantId);
    }
    
    // Restaurants collection - only owners can access their restaurant
    match /restaurants/{restaurantId} {
      allow read: if isOwner(restaurantId);
      allow create: if isAuthenticated() && 
                       isValidRestaurantData() &&
                       request.auth.uid == request.resource.data.adminUserId;
      allow update, delete: if isOwner(restaurantId);
    }
    
    // Tenants collection - strict member-only access with proper validation
    match /tenants/{restaurantId} {
      allow read, write: if isTenantMember(restaurantId);
      
      // Only allow tenant creation by authenticated users with valid data
      allow create: if isAuthenticated() && isValidRestaurantData();
      
      // Users subcollection - strict tenant member access with validation
      match /users/{userId} {
        allow read, write: if isTenantMember(restaurantId);
        allow create: if (isOwner(restaurantId) || 
                         (isAuthenticated() && userId == request.auth.uid)) && 
                        isValidUserData();
      }
      
      // Categories subcollection - tenant member access only
      match /categories/{categoryId} {
        allow read, write: if isTenantMember(restaurantId);
        allow create: if isTenantMember(restaurantId) && 
                        request.resource.data.keys().hasAll(['name', 'createdAt']);
      }
      
      // Menu items subcollection - tenant member access only
      match /menu_items/{itemId} {
        allow read, write: if isTenantMember(restaurantId);
        allow create: if isTenantMember(restaurantId) && 
                        request.resource.data.keys().hasAll(['name', 'price', 'categoryId', 'createdAt']);
      }
      
      // Orders subcollection - allow authenticated access
      match /orders/{orderId} {
        allow read, write: if isAuthenticated();
        
        // Order items subcollection
        match /items/{itemId} {
          allow read, write: if isAuthenticated();
        }
      }
      
      // Tables subcollection - allow authenticated access
      match /tables/{tableId} {
        allow read, write: if isAuthenticated();
      }
      
      // Inventory subcollection - allow authenticated access
      match /inventory/{itemId} {
        allow read, write: if isAuthenticated();
      }
      
      // Customers subcollection - allow authenticated access
      match /customers/{customerId} {
        allow read, write: if isAuthenticated();
      }
      
      // Reservations subcollection - allow authenticated access
      match /reservations/{reservationId} {
        allow read, write: if isAuthenticated();
      }
      
      // Printer configurations subcollection - allow authenticated access
      match /printer_configurations/{printerId} {
        allow read, write: if isAuthenticated();
      }
      
      // Printer assignments subcollection - allow authenticated access
      match /printer_assignments/{assignmentId} {
        allow read, write: if isAuthenticated();
      }
      
      // Order logs subcollection - allow authenticated access
      match /order_logs/{logId} {
        allow read, write: if isAuthenticated();
      }
      
      // App metadata subcollection - allow authenticated access
      match /app_metadata/{metadataId} {
        allow read, write: if isAuthenticated();
      }
    }
    
    // Devices collection - for device registration and sync
    match /devices/{deviceId} {
      allow read, write: if isAuthenticated();
      
      // Active devices subcollection
      match /active_devices/{activeDeviceId} {
        allow read, write: if isAuthenticated();
      }
    }
    
    // Test collection - for testing purposes only
    match /test/{document=**} {
      allow read, write: if isAuthenticated();
    }
    
    // Default deny all - secure by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}